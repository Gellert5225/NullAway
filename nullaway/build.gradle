/*
 * Copyright (C) 2017. Uber Technologies
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import net.ltgt.gradle.errorprone.CheckSeverity

plugins {
  id 'java-library'
  // For code coverage:
  id 'jacoco'
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

dependencies {
    compileOnly deps.apt.autoValueAnnot
    annotationProcessor deps.apt.autoValue
    compileOnly deps.apt.autoServiceAnnot
    annotationProcessor deps.apt.autoService

    compileOnly deps.build.errorProneCheckApi
    implementation deps.build.checkerDataflow
    implementation deps.build.guava

    testImplementation deps.test.junit4
    testImplementation(deps.build.errorProneTestHelpers) {
        exclude group: "junit", module: "junit"
    }
    testImplementation deps.test.jetbrainsAnnotations
    testImplementation deps.test.junit5Jupiter
    testImplementation deps.test.cfQual
    testImplementation deps.test.cfCompatQual
    testImplementation project(":test-java-lib")
    testImplementation deps.test.inferAnnotations
    testImplementation deps.apt.jakartaInject
    testImplementation deps.apt.javaxInject
    testImplementation deps.test.rxjava2
    testImplementation deps.test.commonsLang
    testImplementation deps.test.commonsLang3
    testImplementation project(":test-library-models")
    testImplementation deps.test.lombok
    testImplementation deps.test.springBeans
    testImplementation deps.test.springContext
    testImplementation deps.test.grpcCore
}

javadoc {
    failOnError = false
}


test {
  maxHeapSize = "1024m"
  if (!JavaVersion.current().java9Compatible) {
    jvmArgs "-Xbootclasspath/p:${configurations.errorproneJavac.asPath}"
  } else {
    // to expose necessary JDK types on JDK 16+; see https://errorprone.info/docs/installation#java-9-and-newer
    jvmArgs += [
            "--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED",
            "--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED",
            "--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED",
            // Accessed by Lombok tests
            "--add-opens=jdk.compiler/com.sun.tools.javac.jvm=ALL-UNNAMED",
    ]
  }
}

apply plugin: 'com.vanniktech.maven.publish'

jacoco {
  toolVersion = "0.8.7"
}

// Do not generate reports for individual projects
tasks.named("jacocoTestReport") {
    enabled = false
}

// Share sources folder with other projects for aggregated JaCoCo reports
configurations.create('transitiveSourcesElements') {
    visible = false
    canBeResolved = false
    canBeConsumed = true
    extendsFrom(configurations.implementation)
    attributes {
        attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
        attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
        attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, 'source-folders'))
    }
    sourceSets.main.java.srcDirs.forEach {
        outgoing.artifact(it)
    }
}

// Share the coverage data to be aggregated for the whole product
configurations.create('coverageDataElements') {
    visible = false
    canBeResolved = false
    canBeConsumed = true
    extendsFrom(configurations.implementation)
    attributes {
        attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
        attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
        attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, 'jacoco-coverage-data'))
    }
    // This will cause the test task to run if the coverage data is requested by the aggregation task
    outgoing.artifact(tasks.named("test").map { task ->
        task.extensions.getByType(JacocoTaskExtension).destinationFile
    })
}
