plugins {
    id "java-library"
    id 'jacoco'
}

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    // uncomment if you want to use wala.dalvik or wala.scandroid
    //maven { url "https://raw.github.com/msridhar/maven-jars/mvn-repo/" }
}

dependencies {
    api deps.build.asm
    api deps.build.asmTree
    api deps.build.wala
    api deps.build.guava
    api deps.build.commonsIO
    compileOnly deps.build.errorProneCheckApi

    testImplementation deps.test.junit4
    testImplementation(deps.build.errorProneTestHelpers) {
        exclude group: "junit", module: "junit"
    }
    testImplementation project(":jar-infer:test-java-lib-jarinfer")
    testImplementation project(path: ":jar-infer:test-android-lib-jarinfer", configuration: "default")
    testImplementation files("${System.properties['java.home']}/../lib/tools.jar") // is there a better way?
    testRuntimeOnly deps.build.errorProneCheckApi
}

test {
    maxHeapSize = "1024m"
    jvmArgs "-Xbootclasspath/p:${configurations.errorproneJavac.asPath}"
}

apply plugin: 'com.vanniktech.maven.publish'

jacoco {
    toolVersion = "0.8.7"
}

// Do not generate reports for individual projects
tasks.named("jacocoTestReport") {
    enabled = false
}

// Share sources folder with other projects for aggregated JaCoCo reports
configurations.create('transitiveSourcesElements') {
    visible = false
    canBeResolved = false
    canBeConsumed = true
    extendsFrom(configurations.implementation)
    attributes {
        attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
        attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
        attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, 'source-folders'))
    }
    sourceSets.main.java.srcDirs.forEach {
        outgoing.artifact(it)
    }
}

// Share the coverage data to be aggregated for the whole product
configurations.create('coverageDataElements') {
    visible = false
    canBeResolved = false
    canBeConsumed = true
    extendsFrom(configurations.implementation)
    attributes {
        attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
        attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
        attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, 'jacoco-coverage-data'))
    }
    // This will cause the test task to run if the coverage data is requested by the aggregation task
    outgoing.artifact(tasks.named("test").map { task ->
        task.extensions.getByType(JacocoTaskExtension).destinationFile
    })
}
